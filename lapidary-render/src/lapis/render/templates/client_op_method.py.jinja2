{%- from 'type_hint.py.jinja2' import type_hint %}
{%- macro render_param(param) %}
        {{ param.name }}: {{ type_hint(param.annotation.type, path) }}{% if not param.required %} = lapis_client_base.absent.ABSENT{% endif %},
{%- endmacro %}
    async def {{ func.name }}(
        self,
{%- if func.request_type is not none %}
        request_body: {{ type_hint(func.request_type, path) }}, /, {% endif %}
{%- if func.params | length > 0 %}
        *, {% endif %}
{%- for param in func.params if param.required %}
        {{- render_param(param) }}
{%- endfor %}{% for param in func.params if not param.required %}
        {{- render_param(param) }}
{%- endfor %}
    ) -> {{ type_hint(func.response_type, path) }}:
{%- if func.params_model_name %}
        import {{ func.params_model_name.module }}
        param_model = {{ func.params_model_name.full_name() }}(**locals())
{%- else %}
        param_model = None
{%- endif %}
        return await super()._request(
            '{{ func.method.upper() }}',
            f'{{ func.path }}',
            param_model=param_model,
{%- if func.request_type is not none %}
            request_body=request_body,{% endif %}
{%- if func.response_class_map %}
            response_mapping={ {%- for code, media_type in func.response_class_map.items() %}
                '{{ code }}': { {%- for mime, typ in media_type.items() %}
                    '{{ mime }}': {{ typ.full_name() }},
        {%- endfor %}
                },
    {%- endfor %}
            },
{%- endif %}
{%- if func.auth_name %}
            auth=self.auth_{{ func.auth_name }},{% endif %}
        )
