{%- from 'type_hint.py.jinja2' import type_hint %}
{%- from 'response_map.py.jinja2' import response_map %}
{%- set model = model.init_method %}
    def __init__(
        self,
{%- for param_name, param_type in model.init_auth_params.items() %}
        {{ param_name }}: {{ type_hint(param_type, path) }},
{%- endfor %}
        base_url=
{%- if model.base_urls | length > 0 -%}
        '{{ model.base_urls[0] }}',
{%- else -%}
        None,
{%- endif %}
    ):
        super().__init__(
            client=httpx.AsyncClient(
                base_url=base_url,
                headers=[
{%- for header in model.headers %}
                    ('{{ header[0] }}', '{{ header[1] }}'),
{%- endfor %}
                ]
            ),
{%- if model.response_map %}
            global_response_map={{ response_map(model.response_map) | indent(12)}},
{%- endif %}
        )

{%- for auth_model in model.auth_models %}
        self.auth_{{ auth_model.auth_name }} = lapidary_base.ApiKeyAuth(
            name='{{ auth_model.key }}',
            api_key={{ auth_model.param_name }},
            placement=lapidary_base.{{ auth_model.placement }},
            {%- if auth_model.value_prefix %}
            value_prefix='{{ auth_model.value_prefix }}'{% endif %}
    )
{%- endfor %}
