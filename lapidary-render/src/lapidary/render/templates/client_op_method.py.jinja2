{%- from 'type_hint.py.jinja2' import type_hint %}
{%- from 'response_map.py.jinja2' import response_map %}
{%- macro render_param(param) %}
        {{ param.name }}: {{ type_hint(param.annotation.type, path) }}{% if not param.required %} = lapidary_base.absent.ABSENT{% endif %},
{%- endmacro %}
    async def {{ func.name }}(
        self,
{%- if func.request_type is not none %}
        request_body: {{ type_hint(func.request_type, path) }}, /, {% endif %}
{%- if func.params | length > 0 %}
        *,{% endif %}
{%- for param in func.params if param.required %}
        {{- render_param(param) }}
{%- endfor %}{% for param in func.params if not param.required %}
        {{- render_param(param) }}
{%- endfor %}
    ) -> {{ type_hint(func.response_type, path) }}:
{%- if func.params_model_name %}
        import {{ func.params_model_name.module }}
        param_model = {{ func.params_model_name.full_name() }}(**locals())
{%- else %}
        param_model = None
{%- endif %}
        return await super()._request(
            '{{ func.method.upper() }}',
            f'{{ func.path }}',
            param_model=param_model,
{%- if func.request_type is not none %}
            request_body=request_body,
{%- endif %}
{%- if func.response_map %}
            response_map={{ response_map(func.response_map) | indent(12) }},
{%- endif %}
{%- if func.auth_name %}
            auth=self.auth_{{ func.auth_name }},{% endif %}
        )
